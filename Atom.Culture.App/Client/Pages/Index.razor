@page "/"
@using Syncfusion.Blazor.Charts
@using Atom.Culture.App.Components
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons
@using SFInputs = Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.DropDowns
@using Atom.Culture.App.Shared




<h2>Персональная информация</h2>
<SfTextBox CssClass="e-rtl" Placeholder="Id" FloatLabelType="@FloatLabelType.Auto"></SfTextBox>

<SfTextBox CssClass="e-rtl" Placeholder="Имя" FloatLabelType="@FloatLabelType.Auto"></SfTextBox>

<SfTextBox CssClass="e-rtl" Placeholder="Email" FloatLabelType="@FloatLabelType.Auto"></SfTextBox>

<SfDatePicker CssClass="e-rtl" TValue="DateTime?" Placeholder="Дата рождения"></SfDatePicker>

<SfComboBox TValue="string" CssClass="e-rtl" Value="@person.Sex" TItem="string" Placeholder="Пол" AllowFiltering="true" DataSource="@Sexes">
    <ComboBoxFieldSettings Text="Name" Value="Code"></ComboBoxFieldSettings>
</SfComboBox>

<h2>Индивидуальные предпочтения</h2>

<SfMultiSelect TValue="string[]" Value="@person.Tags" Placeholder="Выберите теги" DataSource="@Country" AllowCustomValue="true" Mode="@VisualMode.Box">
    <MultiSelectFieldSettings Text="Name"></MultiSelectFieldSettings>
</SfMultiSelect>
<SfDateRangePicker Placeholder="Выберите время" Min="@MinDate" Max="@MaxDate"></SfDateRangePicker>
<label class="userselect">Отметьте приемлемую цену билетов?</label>
<SfSlider Enabled="@(!Disabled)" Min="0" Max="100" Step="5" Type=SliderType.Range Value=@RangeValuePrice>
    <SliderTicksData Placement="@TicksPlacementPrice"
                     ShowSmallTicks="true"
                     LargeStep="20"
                     SmallStep="1"></SliderTicksData>
</SfSlider>
<label class="userselect">Сколько времени вы готовы потратить на дорогу?</label>
<SfSlider Enabled="@(!Disabled)" Min="0" Max="100" Step="5" Type=SliderType.Range Value=@RangeValueTime>
    <SliderTicksData Placement="@TicksPlacementTime"
                     ShowSmallTicks="true"
                     LargeStep="20"
                     SmallStep="1"></SliderTicksData>
</SfSlider>

<h2>Рейтинги</h2>
<SfGrid DataSource="@GridData" Toolbar="@(new List<string>() { "Поиск" })" AllowPaging="true" AllowFiltering="true">
    <GridColumns>
        <GridColumn Type="ColumnType.CheckBox" AllowFiltering="false" AllowSorting="false" Width="60"></GridColumn>
        <GridColumn Field=@nameof(RatingsService.Name) IsPrimaryKey="true" HeaderText="Inventor Name" Width="180"></GridColumn>
        <GridColumn Field=@nameof(RatingsService.Source) HeaderText="Number of Patent Families" TextAlign="TextAlign.Right" Width="195"></GridColumn>
        <GridColumn Field=@nameof(RatingsService.Description) HeaderText="Country" Width="120"></GridColumn>
    </GridColumns>
</SfGrid>

<SfButton>
    Сохранить
</SfButton>

@code{
    #region Загрузить данные пользователя
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // person = await Http.GetFromJsonAsync<Person>("WeatherForecast");
        }
        catch
        {
            person = new Person();
        }
    }
    #endregion

    public Person person { get; set; } = new Person();

    SfTextBox date;

    public DateTime MinDate = new DateTime();
    public DateTime MaxDate = new DateTime();

    public List<RatingsService> GridData = new List<RatingsService>()
{
        new RatingsService{Name = "Департамент культуры города Москвы" },
        new RatingsService{Name = "Кинопоиск"},
        new RatingsService{Name = "BadComedian" }
    };

    public int[] RangeValueTime = { 0, 100 };
    SFInputs.Placement TicksPlacementTime;

    public int[] RangeValuePrice = { 0, 100 };
    SFInputs.Placement TicksPlacementPrice;
    bool Disabled = false;

    public class ChartData
    {
        public DateTime XValue { get; set; }
        public double YValue { get; set; }
        public double YValue1 { get; set; }
    }
    public List<ChartData> ConsumerDetails = new List<ChartData>
{
        new ChartData { XValue = new DateTime(2005, 01, 01), YValue = 21, YValue1 = 28 },
        new ChartData { XValue = new DateTime(2006, 01, 01), YValue = 24, YValue1 = 44 },
        new ChartData { XValue = new DateTime(2007, 01, 01), YValue = 36, YValue1 = 48 },
        new ChartData { XValue = new DateTime(2008, 01, 01), YValue = 38, YValue1 = 50 },
        new ChartData { XValue = new DateTime(2009, 01, 01), YValue = 54, YValue1 = 66 },
        new ChartData { XValue = new DateTime(2010, 01, 01), YValue = 57, YValue1 = 78 },
        new ChartData { XValue = new DateTime(2011, 01, 01), YValue = 70, YValue1 = 84 },
    };

    void ChartLoad(ILoadedEventArgs Args)
    {

        Args.Theme = ChartTheme.Bootstrap4;

    }

    #region Пол
    private List<string> Sexes = new List<string>
{
        "Мужской",
        "Женский",
        "Другое"
    };



    #endregion
    #region Теги рекомендаций

    public class RecomendationTag
    {
        public string Name { get; set; }
    }
    private List<RecomendationTag> Country = new List<RecomendationTag>
{
        new RecomendationTag() { Name = "Биология"},
        new RecomendationTag() { Name = "Химия"},
        new RecomendationTag() { Name = "Семья"},
        new RecomendationTag() { Name = "История XX века"},
        new RecomendationTag() { Name = "История Руси" },
        new RecomendationTag() { Name = "Иван Грозный" }
    };
    #endregion
}

